#include "stdafx.h"
#include "client.h"

#ifdef _DEBUG
#define new DEBUG_NEW
#endif

#include <conio.h>
#include <stdio.h>
#include "winsock2.h"

// The one and only application object

//CWinApp theApp;

using namespace std;

//int _tmain(int argc, TCHAR* argv[], TCHAR* envp[])
int main()
{
//----------------------
  // Initialize Winsock
  WSADATA wsaData;
  int iResult = WSAStartup(MAKEWORD(2,2), &wsaData);
  if (iResult != NO_ERROR)
    printf("Error at WSAStartup()\n");

  //----------------------
  // Create a SOCKET for connecting to server
  SOCKET ConnectSocket;
  ConnectSocket = socket(AF_INET, SOCK_STREAM, IPPROTO_TCP);
  if (ConnectSocket == INVALID_SOCKET) {
    printf("Error at socket(): %ld\n", WSAGetLastError());
    WSACleanup();
    return 0;
  }

  //----------------------
  // The sockaddr_in structure specifies the address family,
  // IP address, and port of the server to be connected to.
  sockaddr_in clientService; 
  clientService.sin_family = AF_INET;
  clientService.sin_addr.s_addr = inet_addr("10.100.102.38");//"10.0.0.2");// "127.0.0.1" );
  clientService.sin_port = htons( 27015 );

  //----------------------
  // Connect to server.
  if ( connect( ConnectSocket, (SOCKADDR*) &clientService, sizeof(clientService) ) == SOCKET_ERROR)
  {
    printf( "Failed to connect.\n" );
    WSACleanup();
    return 0;
  }

  printf("Connected to server.\n");


  //----------------------------------------------------------------------------------------------------------------------------


  int bytesRecv, i, arr[22];
  char recvbuf[512] = "";
  char temp[512] = "";

  arr[0] = 21;
  arr[1] = 5;
  for (i = 0; i < 20; i++)
  {
      arr[i+2] = i;
  }


  bytesRecv = recv( ConnectSocket, recvbuf, 512, 0 );
  printf( "Bytes Res: %ld\n", bytesRecv );
  printf( "Answer From server: %s  \n", &recvbuf );


  int rr=0;
  while(rr != 27)
	{
	  //rr = _getch();
      //printf("Send %d \n",rr);
      //sprintf(temp," %d", rr);

      Sleep(500);
	  send(ConnectSocket,(char *)arr, 22*sizeof(int), 0);

	}
  closesocket(ConnectSocket);

  WSACleanup();
  return 0;

}
